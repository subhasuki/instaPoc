# Generated by Django 2.1.15 on 2020-12-28 11:04

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('serialno', models.CharField(db_column='serialno', max_length=100)),
                ('patientname', models.CharField(db_column='patientname', max_length=200)),
                ('doctorname', models.CharField(db_column='doctorname', max_length=100)),
                ('dt', models.DateField(db_column='dt')),
                ('conduct', models.CharField(db_column='conduct', max_length=200)),
                ('purpose', models.CharField(db_column='purpose', max_length=200)),
                ('status', models.CharField(db_column='status', max_length=200)),
                ('session', models.CharField(db_column='session', max_length=200)),
            ],
            options={
                'db_table': 'Appointment_tbl_IT',
                'permissions': (('can_Appointment', 'Can link Appointment'), ('can_Appointmententry', 'Can link Appointmententry'), ('can_Appointmentreport', 'Can link Appointmentreport')),
            },
        ),
        migrations.CreateModel(
            name='AppointmentSerial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('serialno', models.CharField(db_column='serialno', max_length=100)),
            ],
            options={
                'db_table': 'AppointmentSerial_IT',
                'permissions': (('can_AppointmentSerial', 'Can link AppointmentSerial'),),
            },
        ),
        migrations.CreateModel(
            name='Checkupinfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('peropno', models.CharField(db_column='peropno', max_length=100)),
                ('tokenno', models.CharField(db_column='tokenno', max_length=100)),
                ('date', models.DateField(auto_now=True, db_column='date')),
                ('consult', models.CharField(db_column='consult', max_length=200)),
                ('name', models.CharField(db_column='name', max_length=200)),
                ('amount', models.FloatField(db_column='amount')),
                ('status', models.CharField(db_column='status', max_length=200)),
                ('ctype', models.CharField(db_column='type', max_length=200)),
                ('cstatus', models.CharField(db_column='cstatus', max_length=200)),
                ('diagnosis', models.CharField(db_column='diagnosis', max_length=200)),
            ],
            options={
                'db_table': 'Checkupinfo_tbl_IT',
                'permissions': (('can_Checkupinfo', 'Can link Checkupinfo'), ('can_Dashboard', 'Can link Dashboard'), ('can_Tokengen', 'Can link Tokengen'), ('can_Emergencychange', 'Can link Emergencychange'), ('can_Updatestatus', 'Can link Updatestatus'), ('can_Patientvisitingstatus', 'Can link Patientvisitingstatus'), ('can_Patientmonitor', 'Can link Patientmonitor'), ('can_Dailyreport', 'Can link Dailyreport'), ('can_Tokenstatusreport', 'Can link Tokenstatusreport')),
            },
        ),
        migrations.CreateModel(
            name='ComplaintDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('peropid', models.CharField(db_column='peropid', max_length=100)),
                ('dt', models.DateField(auto_now=True, db_column='dt')),
                ('complaint', models.CharField(db_column='complaint', max_length=100)),
            ],
            options={
                'db_table': 'ComplaintDetails_tbl_IT',
                'permissions': (('can_ComplaintDetails', 'Can link ComplaintDetails'),),
            },
        ),
        migrations.CreateModel(
            name='ComplaintsSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('complaints', models.CharField(db_column='complaints', max_length=100)),
            ],
            options={
                'db_table': 'ComplaintsSetting_tbl_IT',
                'permissions': (('can_ComplaintsSetting', 'Can link ComplaintsSetting'), ('can_complaintform', 'Can link complaintform')),
            },
        ),
        migrations.CreateModel(
            name='DiagnosisDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('peropid', models.CharField(db_column='peropid', max_length=100)),
                ('dt', models.DateField(auto_now=True, db_column='dt')),
                ('diagnosis', models.CharField(db_column='diagnosis', max_length=100)),
            ],
            options={
                'db_table': 'DiagnosisDetails_tbl_IT',
                'permissions': (('can_DiagnosisDetails', 'Can link DiagnosisDetails'),),
            },
        ),
        migrations.CreateModel(
            name='DiagnosisSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('diagnosis', models.CharField(db_column='diagnosis', max_length=100)),
            ],
            options={
                'db_table': 'DiagnosisSetting_tbl_IT',
                'permissions': (('can_DiagnosisSetting', 'Can link DiagnosisSetting'), ('can_Diagnosisform', 'Can link Diagnosisform')),
            },
        ),
        migrations.CreateModel(
            name='DoctorLeaveInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('doctorname', models.CharField(db_column='doctorname', max_length=100)),
                ('leavedate', models.DateField(auto_now=True, db_column='leavedate')),
                ('purpose', models.CharField(db_column='purpose', max_length=100)),
            ],
            options={
                'db_table': 'DoctorLeaveInfo_tbl_IT',
                'permissions': (('can_DoctorLeaveInfo', 'Can link DoctorLeaveInfo'), ('can_Doctorleavesetting', 'Can link Doctorleavesetting')),
            },
        ),
        migrations.CreateModel(
            name='DrDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('drname', models.CharField(db_column='drname', max_length=100)),
                ('shortname', models.CharField(db_column='shortname', max_length=100)),
                ('visitingtime', models.CharField(db_column='visitingtime', max_length=100)),
            ],
            options={
                'db_table': 'DrDetails_tbl_IT',
                'permissions': (('can_DrDetails', 'Can link DrDetails'), ('can_tokenset', 'Can link tokenset')),
            },
        ),
        migrations.CreateModel(
            name='DrugInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('dt', models.DateField(auto_now=True, db_column='dt')),
                ('name', models.CharField(db_column='name', max_length=100)),
                ('mfr', models.CharField(db_column='mfr', max_length=100)),
                ('iu', models.CharField(db_column='iu', max_length=100)),
                ('kindprod', models.CharField(db_column='kindprod', max_length=100)),
                ('storeplace', models.CharField(db_column='storeplace', max_length=100)),
                ('stockremaining', models.CharField(db_column='stockremaining', max_length=100)),
                ('stockvalue', models.CharField(db_column='stockvalue', max_length=100)),
            ],
            options={
                'db_table': 'DrugInfo_tbl_RM',
                'permissions': (('can_DrugInfo', 'Can link DrugInfo'),),
            },
        ),
        migrations.CreateModel(
            name='Fee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('status', models.CharField(db_column='status', max_length=100)),
                ('newnormal', models.CharField(db_column='newnormal', max_length=100)),
                ('newemer', models.CharField(db_column='newemer', max_length=100)),
                ('oldnormal', models.CharField(db_column='oldnormal', max_length=100)),
                ('oldemer', models.CharField(db_column='oldemer', max_length=100)),
                ('lastupdate', models.CharField(db_column='lastupdate', max_length=100)),
            ],
            options={
                'db_table': 'Fee_tbl_IT',
                'permissions': (('can_Fee', 'Can link Fee'),),
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('groupname', models.CharField(db_column='groupname', max_length=100)),
            ],
            options={
                'db_table': 'Group_tbl_LS',
                'permissions': (('can_Group', 'Can link Group'),),
            },
        ),
        migrations.CreateModel(
            name='IPInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('ipno', models.CharField(db_column='ipno', max_length=100)),
                ('perid', models.CharField(db_column='perid', max_length=100)),
                ('admitdate', models.DateTimeField(blank=True, default=datetime.datetime.now)),
                ('dischargedate', models.DateField(blank=True)),
                ('doctorname', models.CharField(db_column='doctorname', max_length=100)),
                ('name', models.CharField(db_column='name', max_length=100)),
                ('age', models.CharField(db_column='age', max_length=100)),
                ('gender', models.CharField(db_column='gender', max_length=100)),
                ('adres', models.CharField(db_column='adres', max_length=100)),
                ('mobile', models.CharField(db_column='mobile', max_length=100)),
                ('advance', models.CharField(db_column='advance', max_length=100)),
                ('roomtype', models.CharField(db_column='roomtype', max_length=100)),
                ('roomno', models.CharField(db_column='roomno', max_length=100)),
                ('status', models.CharField(db_column='status', max_length=100)),
            ],
            options={
                'db_table': 'IPInfo_tbl_IP',
                'permissions': (('can_IPInfo', 'Can link IPInfo'), ('can_Newadmission', 'Can link Newadmission'), ('can_Ipdailyreport', 'Can link Ipdailyreport'), ('can_Ipmonitor', 'Can link Ipmonitor')),
            },
        ),
        migrations.CreateModel(
            name='IPSerialNo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('ipno', models.CharField(db_column='ipno', max_length=100)),
            ],
            options={
                'db_table': 'IPSerialNo_tbl_IP',
                'permissions': (('can_IPSerialNo', 'Can link IPSerialNo'),),
            },
        ),
        migrations.CreateModel(
            name='KUTtok',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('tokno', models.CharField(db_column='tokno', max_length=100)),
            ],
            options={
                'db_table': 'KUTtok_tbl_IT',
                'permissions': (('can_KUTtok', 'Can link KUTtok'),),
            },
        ),
        migrations.CreateModel(
            name='LabDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('opno', models.CharField(db_column='opno', max_length=100)),
                ('tokno', models.CharField(db_column='tokno', max_length=100)),
                ('dt', models.DateField(auto_now=True, db_column='dt')),
                ('sno', models.CharField(db_column='sno', max_length=100)),
                ('groupname', models.CharField(db_column='groupname', max_length=100)),
                ('subgroupname', models.CharField(db_column='subgroupname', max_length=100)),
                ('testname', models.CharField(db_column='testname', max_length=100)),
                ('result', models.CharField(db_column='result', max_length=100)),
                ('refrange', models.CharField(db_column='refrange', max_length=100)),
                ('amount', models.FloatField(db_column='amount')),
            ],
            options={
                'db_table': 'LabDetails_tbl_IT',
                'permissions': (('can_LabDetails', 'Can link LabDetails'),),
            },
        ),
        migrations.CreateModel(
            name='LabRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('opno', models.CharField(db_column='opno', max_length=100)),
                ('tokno', models.CharField(db_column='tokno', max_length=100)),
                ('dt', models.DateField(auto_now=True, db_column='dt')),
                ('name', models.CharField(db_column='name', max_length=100)),
                ('status', models.CharField(db_column='status', max_length=100)),
                ('labid', models.CharField(db_column='labid', max_length=100)),
            ],
            options={
                'db_table': 'LabRequest_tbl_IT',
                'permissions': (('can_LabRequest', 'Can link LabRequest'), ('can_patinetdetails', 'Can link patinetdetails')),
            },
        ),
        migrations.CreateModel(
            name='NIHtok',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('tokno', models.CharField(db_column='tokno', max_length=100)),
            ],
            options={
                'db_table': 'NIHtok_tbl_IT',
                'permissions': (('can_NIHtok', 'Can link NIHtok'),),
            },
        ),
        migrations.CreateModel(
            name='opinfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('peropid', models.CharField(db_column='peropid', max_length=100)),
                ('regdr', models.DateField(auto_now=True, db_column='regdr')),
                ('name', models.CharField(db_column='name', max_length=100)),
                ('addrs', models.CharField(db_column='addrs', max_length=200)),
                ('gender', models.CharField(db_column='gender', max_length=200)),
                ('dob', models.DateField(auto_now=True, db_column='dob')),
                ('age', models.CharField(db_column='age', max_length=200)),
                ('mobileno', models.CharField(db_column='mobileno', max_length=200)),
                ('diagnosis', models.CharField(db_column='diagnosis', max_length=200)),
            ],
            options={
                'db_table': 'opinfo_tbl_IT',
                'permissions': (('can_opinfo', 'Can link opinfo'), ('can_Searchip', 'Can link Searchip'), ('can_Updateform', 'Can link Updateform'), ('can_Searchopno', 'Can link Searchopno')),
            },
        ),
        migrations.CreateModel(
            name='peropidtbl',
            fields=[
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('peropids', models.CharField(db_column='peropid', max_length=100, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'peropid_tbl_IT',
                'permissions': (('can_peropidtbl', 'Can link peropidtbl'),),
            },
        ),
        migrations.CreateModel(
            name='PrescriptionDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('perid', models.CharField(db_column='perid', max_length=100)),
                ('tokenid', models.CharField(db_column='tokenid', max_length=100)),
                ('pname', models.CharField(db_column='pname', max_length=100)),
                ('dt', models.DateField(auto_now=True, db_column='dt')),
                ('product', models.CharField(db_column='product', max_length=100)),
                ('qty', models.CharField(db_column='qty', max_length=200)),
                ('morn', models.CharField(db_column='morn', max_length=200)),
                ('after', models.CharField(db_column='after', max_length=200)),
                ('night', models.CharField(db_column='night', max_length=200)),
                ('beforefood', models.CharField(db_column='beforefood', max_length=200)),
                ('afterfood', models.CharField(db_column='afterfood', max_length=200)),
            ],
            options={
                'db_table': 'PrescriptionDetails_tbl_IT',
                'permissions': (('can_PrescriptionDetails', 'Can link PrescriptionDetails'),),
            },
        ),
        migrations.CreateModel(
            name='Remarks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('perop', models.CharField(db_column='perop', max_length=100)),
                ('dt', models.DateField(auto_now=True, db_column='dt')),
                ('remark', models.CharField(db_column='remark', max_length=100)),
            ],
            options={
                'db_table': 'Remarks_tbl_IT',
                'permissions': (('can_Remarks', 'Can link Remarks'),),
            },
        ),
        migrations.CreateModel(
            name='role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('role', models.CharField(db_column='role', max_length=100)),
            ],
            options={
                'db_table': 'Role_tbl_IT',
                'permissions': (('can_role', 'Can link role'),),
            },
        ),
        migrations.CreateModel(
            name='Roomtype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('roomtype', models.CharField(db_column='roomtype', max_length=100)),
            ],
            options={
                'db_table': 'Roomtype_tbl_IP',
                'permissions': (('can_Roomtype', 'Can link Roomtype'),),
            },
        ),
        migrations.CreateModel(
            name='SAMtok',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('tokno', models.CharField(db_column='tokno', max_length=100)),
            ],
            options={
                'db_table': 'SAMtok_tbl_IT',
                'permissions': (('can_SAMtok', 'Can link SAMtok'),),
            },
        ),
        migrations.CreateModel(
            name='sub_user',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(db_column='created_by', max_length=100)),
                ('username', models.CharField(db_column='username', max_length=100)),
                ('email', models.CharField(blank=True, db_column='email', max_length=100, null=True)),
                ('empcode', models.CharField(blank=True, db_column='empcode', max_length=100, null=True)),
                ('dob', models.DateField(blank=True, db_column='dob', max_length=100, null=True)),
                ('age', models.CharField(blank=True, db_column='age', max_length=200, null=True)),
                ('bloodgroup', models.CharField(blank=True, db_column='bloodgroup', max_length=200, null=True)),
                ('gender', models.CharField(blank=True, db_column='gender', max_length=200, null=True)),
                ('address', models.CharField(blank=True, db_column='address', max_length=200, null=True)),
                ('mobileno', models.CharField(blank=True, db_column='mobileno', max_length=200, null=True)),
                ('qualification', models.CharField(blank=True, db_column='qualification', max_length=200, null=True)),
                ('role', models.CharField(blank=True, db_column='role', max_length=200, null=True)),
                ('profile', models.ImageField(blank=True, null=True, upload_to='profile/')),
                ('status', models.CharField(db_column='status', default=False, max_length=200)),
                ('date_join', models.DateField(db_column='date_join', max_length=200)),
                ('update_join', models.DateField(blank=True, default=datetime.datetime.now)),
            ],
            options={
                'db_table': 'subuser_tbl_HA',
                'permissions': (('can_sub_user', 'Can link sub_user'), ('can_Addemployee', 'Can link Addemployee')),
            },
        ),
        migrations.CreateModel(
            name='SubGroupName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('GroupName', models.CharField(db_column='GroupName', max_length=100)),
                ('SubGroupName', models.CharField(db_column='SubGroupName', max_length=100)),
            ],
            options={
                'db_table': 'SubGroupName_tbl_LS',
                'permissions': (('can_SubGroupName', 'Can link SubGroupName'),),
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('GroupName', models.CharField(db_column='GroupName', max_length=100)),
                ('SubGroupName', models.CharField(db_column='SubGroupName', max_length=100)),
                ('TestName', models.CharField(db_column='TestName', max_length=100)),
                ('Unit', models.CharField(db_column='Unit', max_length=100)),
                ('RefRange', models.CharField(db_column='RefRange', max_length=100)),
                ('high', models.FloatField(db_column='high', max_length=100)),
                ('low', models.FloatField(db_column='low', max_length=100)),
                ('Amount', models.FloatField(db_column='Amount', max_length=100)),
            ],
            options={
                'db_table': 'Test_tbl_LS',
                'permissions': (('can_Test', 'Can link Test'),),
            },
        ),
        migrations.CreateModel(
            name='TesterInfo',
            fields=[
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('labid', models.CharField(blank=True, db_column='labid', max_length=100, primary_key=True, serialize=False)),
                ('optype', models.CharField(db_column='optype', max_length=100)),
                ('opipid', models.CharField(db_column='opipid', max_length=100)),
                ('date', models.DateField(auto_now=True, db_column='date')),
                ('patiendname', models.CharField(db_column='patiendname', max_length=100)),
                ('Agesex', models.CharField(db_column='Agesex', max_length=100)),
                ('Drname', models.CharField(db_column='Drname', max_length=100)),
                ('collecttime', models.CharField(db_column='collecttime', max_length=100)),
                ('reporttime', models.CharField(db_column='reporttime', max_length=100)),
                ('status', models.CharField(db_column='status', max_length=100)),
                ('totalamount', models.CharField(db_column='totalamount', max_length=100)),
                ('paidamoun', models.CharField(db_column='paidamoun', max_length=100)),
                ('balance', models.CharField(db_column='balance', max_length=100)),
            ],
            options={
                'db_table': 'TesterInfo_tbl_LS',
                'permissions': (('can_TesterInfo', 'Can link TesterInfo'),),
            },
        ),
        migrations.CreateModel(
            name='TestResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('labid', models.CharField(db_column='labid', max_length=100, null=True)),
                ('groupname', models.CharField(db_column='groupname', max_length=100)),
                ('date', models.DateField(auto_now=True, db_column='dt')),
                ('subgroupname', models.CharField(db_column='subgroupname', max_length=100)),
                ('testname', models.CharField(db_column='testname', max_length=100)),
                ('result', models.CharField(db_column='result', max_length=100)),
                ('refrange', models.CharField(db_column='refrange', max_length=100)),
                ('amount', models.CharField(db_column='amount', max_length=100)),
            ],
            options={
                'db_table': 'TestResult_tbl_LS',
                'permissions': (('can_TestResult', 'Can link TestResult'),),
            },
        ),
        migrations.CreateModel(
            name='ThermalAmount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('opno', models.CharField(db_column='opno', max_length=100)),
                ('tokno', models.CharField(db_column='tokno', max_length=100)),
                ('dt', models.DateField(auto_now=True, db_column='dt')),
                ('test', models.CharField(db_column='test', max_length=100)),
                ('amount', models.FloatField(db_column='amount')),
            ],
            options={
                'db_table': 'ThermalAmount_tbl_IT',
                'permissions': (('can_ThermalAmount', 'Can link ThermalAmount'),),
            },
        ),
        migrations.CreateModel(
            name='TokenDiagnosis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('emp_id', models.IntegerField(blank=True, db_column='emp_id', null=True)),
                ('diagnosis', models.CharField(db_column='diagnosis', max_length=100)),
            ],
            options={
                'db_table': 'TokenDiagnosis_tbl_IT',
                'permissions': (('can_TokenDiagnosis', 'Can link TokenDiagnosis'), ('can_tokendiagonsisform', 'Can link tokendiagonsisform')),
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('hosname', models.CharField(blank=True, db_column='hosname', max_length=200, null=True)),
                ('address', models.CharField(blank=True, db_column='address', max_length=200, null=True)),
                ('pincode', models.CharField(blank=True, db_column='pincode', max_length=200, null=True)),
                ('city', models.CharField(blank=True, db_column='city', max_length=200, null=True)),
                ('country', models.CharField(blank=True, db_column='country', max_length=200, null=True)),
                ('phoneno', models.CharField(blank=True, db_column='phoneno', max_length=200, null=True)),
                ('mobileno', models.CharField(db_column='mobileno', max_length=200)),
                ('slogan', models.CharField(blank=True, db_column='slogan', max_length=200, null=True)),
                ('tandc', models.CharField(blank=True, db_column='tandc', max_length=200, null=True)),
                ('profile', models.ImageField(default='hospital-logo.png', upload_to='profile/')),
                ('created_by', models.IntegerField(blank=True, db_column='created_by', null=True)),
                ('role', models.CharField(db_column='role', max_length=200)),
                ('status', models.CharField(db_column='status', default=False, max_length=200)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'permissions': (('can_user', 'Can link user'), ('can_profile', 'Can link profile')),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
